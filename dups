#!/bin/bash

# Function to get the sorted list of words in a file
get_words() {
    tr '[:space:]' '[\n*]' < "$1" | tr '[:punct:]' '\n' | tr 'A-Z' 'a-z' | sort -u
}

# Function to check if two files have three or more words in common
have_common_words() {
    local file1_words=$(mktemp)
    local file2_words=$(mktemp)

    get_words "$1" > "$file1_words"
    get_words "$2" > "$file2_words"

    local common_words=$(comm -12 "$file1_words" "$file2_words" | wc -l)

    rm "$file1_words" "$file2_words"

    if [ "$common_words" -ge 3 ]; then
        return 0
    else
        return 1
    fi
}

# Function to remove duplicates
remove_duplicates() {
    local files=("$@")
    local file_count=${#files[@]}

    for ((i = 0; i < file_count; i++)); do
        for ((j = i + 1; j < file_count; j++)); do
            if have_common_words "${files[i]}" "${files[j]}"; then
                echo "Removing duplicate file: ${files[j]}"
                rm "${files[j]}"
                # Rebuild the files array without the removed file
                files=("${files[@]:0:j}" "${files[@]:j+1}")
                file_count=${#files[@]}
                ((j--))
            fi
        done
    done
}

# Get all files in the current directory
mapfile -d '' files < <(find . -maxdepth 1 -type f -print0)

# Check if there are any files to process
if [ "${#files[@]}" -lt 2 ]; then
    echo "Not enough files to process."
    exit 1
fi

# Call the function to remove duplicates
remove_duplicates "${files[@]}"
